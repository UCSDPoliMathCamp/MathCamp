{
  "hash": "54b909e7f5422004f71413ee235e5985",
  "result": {
    "markdown": "# Objects, Functions, Loops {#robjloops}\n\n\n### Where are we? Where are we headed? {-}\n\nUp till now, you should have covered:\n\n* R basic programming\n* Data Import\n\nToday we'll cover\n\n* Objects\n* Functions\n* Loops\n\n\n\n## What is an object?\n\nNow that we have covered how to load in data and some basic information about R, let's dive into some fundamentals of the R language. \n\nLet's first set up \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-1_9ebca5464cf8d6ea5f3c742edafb6e40'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readr)\nlibrary(haven)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-2_9a8f7178b49085baef5f909426453ec2'}\n\n```{.r .cell-code}\ncen10 <- read_csv(\"data/input/usc2010_001percent.csv\", col_types = cols())\n```\n:::\n\n\n\nObjects are abstract symbols in which you store data. Here we will create an object from `copy`, and assign `cen10` to it. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-3_cea8d2ae89f6223e644c3432341e32a7'}\n\n```{.r .cell-code}\ncopy <- cen10 \n```\n:::\n\n\n\nThis looks the same as the original dataset:\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-4_12431e99d670e3b38ae37ba47bc258c0'}\n\n```{.r .cell-code}\ncopy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30,871 x 4\n   state         sex      age race       \n   <chr>         <chr>  <dbl> <chr>      \n 1 New York      Female     8 White      \n 2 Ohio          Male      24 White      \n 3 Nevada        Male      37 White      \n 4 Michigan      Female    12 White      \n 5 Maryland      Female    18 Black/Negro\n 6 New Hampshire Male      50 White      \n 7 Iowa          Female    51 White      \n 8 Missouri      Female    41 White      \n 9 New Jersey    Male      62 White      \n10 California    Male      25 White      \n# ... with 30,861 more rows\n# i Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n\nWhat happens if you do this next?\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-5_b7deb88d64e20f545b8b404c3e6ff648'}\n\n```{.r .cell-code}\ncopy <- \"\"\n```\n:::\n\n\n\nIt got reassigned:\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-6_35c2ebbc889964252fe1d84cffcea323'}\n\n```{.r .cell-code}\ncopy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\"\n```\n:::\n:::\n\n\n\n### lists\n\nLists are one of the most generic and flexible type of object. You can make an empty list by the function `list()`\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-7_5c5e88f6492469b6e5b5c1358e83c920'}\n\n```{.r .cell-code}\nmy_list <- list()\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n:::\n\n\nAnd start filling it in. Slots on the list are invoked by double square brackets `[[]]`\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-8_e10490c4414a90d698543018662734e1'}\n\n```{.r .cell-code}\nmy_list[[1]] <- \"contents of the first slot -- this is a string\"\nmy_list[[\"slot 2\"]] <- \"contents of slot named slot 2\"\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"contents of the first slot -- this is a string\"\n\n$`slot 2`\n[1] \"contents of slot named slot 2\"\n```\n:::\n:::\n\n\neach slot can be anything. What are we doing here? We are defining the 1st slot of the list `my_list` to be a vector `c(1, 2, 3, 4, 5)`\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-9_67da575b60659c932096cc4d6bee163d'}\n\n```{.r .cell-code}\nmy_list[[1]] <- c(1, 2, 3, 4, 5)\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1 2 3 4 5\n\n$`slot 2`\n[1] \"contents of slot named slot 2\"\n```\n:::\n:::\n\n\n\nYou can even make nested lists. Let's say we want the 1st slot of the list to be another list of three elements. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-10_c66e9591d67eaa5f6fa3de34e1a484f6'}\n\n```{.r .cell-code}\nmy_list[[1]][[1]] <- \"subitem 1 in slot 1 of my_list\"\nmy_list[[1]][[2]] <- \"subitem 1 in slot 2 of my_list\"\nmy_list[[1]][[3]] <- \"subitem 1 in slot 3 of my_list\"\n\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"subitem 1 in slot 1 of my_list\" \"subitem 1 in slot 2 of my_list\"\n[3] \"subitem 1 in slot 3 of my_list\" \"4\"                             \n[5] \"5\"                             \n\n$`slot 2`\n[1] \"contents of slot named slot 2\"\n```\n:::\n:::\n\n\n\n\n## Making your own objects\nWe've covered one type of object, which is a list. You saw it was quite flexible. How many types of objects are there? \n\nThere are an infinite number of objects, because people make their own class of object. You can detect the type of the object (the class) by the function `class`\n\nObject can be said to be an instance of a class.\n\n___Analogies___: \n\n__class__ - Pokemon, __object__ - Pikachu\n\n__class__ - Book, __object__ - To Kill a Mockingbird\n\n__class__ - DataFrame, __object__ - 2010 census data\n\n__class__ - Character, __object__ - \"Programming is Fun\"\n           \n\nWhat is type (class) of object is `cen10`?\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-11_21aabf9214a59123c2871d7436e4d234'}\n\n```{.r .cell-code}\nclass(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n```\n:::\n:::\n\n\n\nWhat about this text? \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-12_eebb4ea7a6d58436894d3d1fb7932d61'}\n\n```{.r .cell-code}\nclass(\"some random text\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\nTo change or create the class of any object, you can _assign_ it. To do this, assign the name of your class to character to an object's `class()`. \n\nWe can start from a simple list. For example, say we wanted to store data about pokemon. Because there is no pre-made package for this, we decide to make our own class. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-13_ee5f0dff85a203dd51ed39bb0f48607b'}\n\n```{.r .cell-code}\npikachu <- list(name = \"Pikachu\",\n                number = 25,\n                type = \"Electric\",\n                color = \"Yellow\")\n```\n:::\n\n\n\nand we can give it any class name we want. \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-14_801ede23645e9f5267e9d8c26a1cc9e3'}\n\n```{.r .cell-code}\nclass(pikachu) <- \"Pokemon\"\nstr(pikachu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ name  : chr \"Pikachu\"\n $ number: num 25\n $ type  : chr \"Electric\"\n $ color : chr \"Yellow\"\n - attr(*, \"class\")= chr \"Pokemon\"\n```\n:::\n\n```{.r .cell-code}\npikachu$type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Electric\"\n```\n:::\n:::\n\n\n\n### Seeing R through objects\nMost of the R objects that you will see as you advance are their own objects. For example, here's a linear regression object (which you will learn more about in 204B):\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-15_34cf35dd6cd85f13b453e9e8a82eb25b'}\n\n```{.r .cell-code}\nols <- lm(mpg ~ wt + vs + gear + carb, mtcars)\nclass(ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"lm\"\n```\n:::\n:::\n\n\n\nAnything can be an object! Even graphs (in `ggplot`) can be assigned, re-assigned, and edited. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-16_95ade1be5da7d13004020caae6dee9b2'}\n\n```{.r .cell-code}\ngrp_race <- group_by(cen10, race)%>%\n  summarize(count = n())\n\ngrp_race_ordered <- arrange(grp_race, count) %>% \n  mutate(race = forcats::as_factor(race))\n\ngg_tab <- ggplot(data = grp_race_ordered) +\n  aes(x = race, y = count) +\n  geom_col() +\n  labs(caption = \"Source: U.S. Census 2010\")\n\ngg_tab\n```\n\n::: {.cell-output-display}\n![](12_functions_obj_loops_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nYou can change the orientation\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-17_9e625732a03c4dffae41fd947354a7f7'}\n\n```{.r .cell-code}\ngg_tab<- gg_tab + coord_flip()\n```\n:::\n\n\n\n\n\n### Parsing an object by `str()s`\nIt can be hard to understand an `R` object because its contents are unknown. The function `str`, short for structure, is a quick way to look into the innards of an object\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-18_dca34f50488758c56c3f02825bc9956a'}\n\n```{.r .cell-code}\nstr(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $       : chr [1:5] \"subitem 1 in slot 1 of my_list\" \"subitem 1 in slot 2 of my_list\" \"subitem 1 in slot 3 of my_list\" \"4\" ...\n $ slot 2: chr \"contents of slot named slot 2\"\n```\n:::\n\n```{.r .cell-code}\nclass(my_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\nSame for the object we just made\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-19_f5cffba15cdd9a844de0bd7b901c692b'}\n\n```{.r .cell-code}\nstr(pikachu)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 4\n $ name  : chr \"Pikachu\"\n $ number: num 25\n $ type  : chr \"Electric\"\n $ color : chr \"Yellow\"\n - attr(*, \"class\")= chr \"Pokemon\"\n```\n:::\n:::\n\n\n\nWhat does a `ggplot` object look like? Very complicated, but at least you can see it:\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-20_a689bb89d50dd23cac7982024977b6c2'}\n\n```{.r .cell-code}\n# enter this on your console\nstr(gg_tab)\n```\n:::\n\n\n\n\n\n## Types of variables\nIn the social science we often analyze variables. As you saw in the tutorial, different types of variables require different care. \n\nA key link with what we just learned is that variables are also types of R objects. \n\n### scalars\nOne number. How many people did we count in our Census sample?\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-21_a64a938a4f1f35c7d46d72ccbf56b088'}\n\n```{.r .cell-code}\nnrow(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30871\n```\n:::\n:::\n\n\nQuestion: What proportion of our census sample is Native American? This number is also a scalar\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-22_a9795aba85ed9f29b404012b08ebd8bd'}\n\n```{.r .cell-code}\n# Enter yourself\nunique(cen10$race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"White\"                            \"Black/Negro\"                     \n[3] \"Other race, nec\"                  \"American Indian or Alaska Native\"\n[5] \"Chinese\"                          \"Other Asian or Pacific Islander\" \n[7] \"Two major races\"                  \"Three or more major races\"       \n[9] \"Japanese\"                        \n```\n:::\n\n```{.r .cell-code}\nmean(cen10$race == \"American Indian or Alaska Native\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.009555894\n```\n:::\n:::\n\n\nHint: you can use the function `mean()` to calcualte the sample mean. The sample proportion is the mean of a sequence of number, where your event of interest is a 1 (or `TRUE`) and others are 0 (or `FALSE`).\n\n\n### numeric vectors\n\nA sequence of numbers. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-23_bbba1cfea3e3c4987e67828281ed9aaa'}\n\n```{.r .cell-code}\ngrp_race_ordered$count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]    77    88   295   354   869  1129  1839  4013 22207\n```\n:::\n\n```{.r .cell-code}\nclass(grp_race_ordered$count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\nOr even, all the ages of the millions of people in our Census. Here are just the first few numbers of the list. \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-24_20c043a47cc3c5a095969e4d0ff7b829'}\n\n```{.r .cell-code}\nhead(cen10$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  8 24 37 12 18 50\n```\n:::\n:::\n\n\n### characters (aka strings)\n\nThis can be just one stretch of characters \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-25_4c6bc9ebf512a2a7e99da65152f7402c'}\n\n```{.r .cell-code}\nmy_name <- \"Meg\"\nmy_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Meg\"\n```\n:::\n\n```{.r .cell-code}\nclass(my_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nor more characters. Notice here that there's a difference between a vector of individual characters and a length-one object of characters.\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-26_4b68bfd05ce44ee40c2ab2b2a0842715'}\n\n```{.r .cell-code}\nmy_name_letters <-  c(\"M\",\"e\",\"g\")\nmy_name_letters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"M\" \"e\" \"g\"\n```\n:::\n\n```{.r .cell-code}\nclass(my_name_letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nFinally, remember that lower vs. upper case matters in R!\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-27_2a7543f4d9574a522b04596afd8c63d5'}\n\n```{.r .cell-code}\nmy_name2 <- \"shiro\"\nmy_name == my_name2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n\n\n## What is a function?\n\nMost of what we do in R is executing a function. `read_csv()`, `nrow()`, `ggplot()` .. pretty much anything with a parentheses is a function. And even things like `<-` and `[` are functions as well.\n\nA function is a set of instructions with specified ingredients. It takes an __input__, then __manipulates__ it -- changes it in some way -- and then returns the manipulated product. \n\nOne way to see what a function actually does is to enter it without parentheses. \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-28_c5c8d02c157fa404535137bf525fcde3'}\n\n```{.r .cell-code}\n# enter this on your console\ntable\n```\n:::\n\nYou'll see below that the most basic functions are quite complicated internally. \n\nYou'll notice that functions contain other functions. _wrapper_ functions are functions that \"wrap around\" existing functions. This sounds redundant, but it's an important feature of programming. If you find yourself repeating a command more than two times, you should make your own function, rather than writing the same type of code. \n\n\n### Write your own function\nIt's worth remembering the basic structure of a function. You create a new function, call it `my_fun` by this:\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-29_7987d3b792a269a0c355e0dc3d85566f'}\n\n```{.r .cell-code}\nmy_fun <- function() {\n  \n}\n```\n:::\n\n\nIf we wanted to generate a function that computed the number of men in your data, what would that look like?\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-30_e288874af9885b24e9771bfa8a4f9760'}\n\n```{.r .cell-code}\ncount_men <- function(data) {\n  \n  nmen <- sum(data$sex == \"Male\")\n  \n  return(nmen)\n}\n```\n:::\n\n\n\nThen all we need to do is feed this function a dataset\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-31_057203a3a8cb81762c5f4a4bc003b31d'}\n\n```{.r .cell-code}\ncount_men(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15220\n```\n:::\n:::\n\n\nThe point of a function is that you can use it again and again without typing up the set of constituent manipulations. So, what if we wanted to figure out the number of men in California?\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-32_907f257febea55bf2879cef59096cd45'}\n\n```{.r .cell-code}\ncount_men(cen10[cen10$state == \"California\",])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1876\n```\n:::\n:::\n\n\n\nLet's go one step further. What if we want to know the proportion of non-whites in a state, just by entering the name of the state? There's multiple ways to do it, but it could look something like this\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-33_52e87412a067c9f86c509a495e172533'}\n\n```{.r .cell-code}\nnw_in_state <- function(data, state) {\n  \n  s.subset <- data[data$state == state,]\n  total.s <- nrow(s.subset)\n  nw.s <- sum(s.subset$race != \"White\")\n  \n  nw.s / total.s\n}\n```\n:::\n\n\nThe last line is what gets generated from the function. To be more explicit you can wrap the last line around `return()`. (as in `return(nw.s/total.s`). `return()` is used when you want to break out of a function in the middle of it and not wait till the last line.\n\nTry it on your favorite state!\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-34_9ddc51e8a9a1b210f3ea138394534394'}\n\n```{.r .cell-code}\nnw_in_state(cen10, \"Massachusetts\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2040185\n```\n:::\n:::\n\n\n\n## Checkpoint {-}\n\n\n### 1 {-}\n\nTry making your own function, `average_age_in_state`, that will give you the average age of people in a given state.\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-35_a1d905ae094eaeb55a1a994c026920d4'}\n\n```{.r .cell-code}\n# Enter on your own\n```\n:::\n\n\n\n\n\n### 2 {-}\n\nTry making your own function, `asians_in_state`, that will give you the number of `Chinese`, `Japanese`, and `Other Asian or Pacific Islander` people in a given state.\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-36_9ac2c94917585f7b403bcbc4b77efe27'}\n\n```{.r .cell-code}\n# Enter on your own\n```\n:::\n\n\n### 3 {-}\n\nTry making your own function, 'top_10_oldest_cities', that will give you the names of cities whose population's average age is top 10 oldest. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-37_dc04a9d9dbc90cd0292c0af02a3881bc'}\n\n```{.r .cell-code}\n# Enter on your own\n```\n:::\n\n\n\n## What is a package?\nYou can think of a package as a suite of functions that other people have already built for you to make your life easier. \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-38_56fe9d56bc3a5f9ddedd7cdaadacb1f3'}\n\n```{.r .cell-code}\nhelp(package = \"ggplot2\")\n```\n:::\n\n\n\nTo use a package, you need to do two things: (1) install it, and then (2) load it. \n\nInstalling is a one-time thing\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-39_6adadf2985f2e0d664931c16e23df110'}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nBut you need to load each time you start a  R instance. So always keep these commands on a script.\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-40_b484243d0ad68b0986b82e84fde97a02'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\nIn `rstudio.cloud`, we already installed a set of packages for you. But when you start your own R instance, you need to have installed the package at some point. \n\n## Conditionals\n\nSometimes, you want to execute a command only under certain conditions. This is done through the almost universal function, `if()`. Inside the `if` function we enter a logical statement. The line that is adjacent to, or follows, the `if()` statement only gets executed if the statement returns `TRUE`. \n\nFor example, \n\nFor example, \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-41_f5e3b2b10cabe24a0b9fa0e74de64c6b'}\n\n```{.r .cell-code}\nx <- 5\nif (x >0) {\n  print(\"positive number\")\n} else if (x == 0)  {\n  print (\"zero\")\n} else {\n  print(\"negative number\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"positive number\"\n```\n:::\n:::\n\n\nYou can wrap that whole things in a function \n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-42_e5861e1d3bd172dae2e60076d5d9919f'}\n\n```{.r .cell-code}\nis_positive <- function(number) {\n  if (number >0) {\n    print(\"positive number\")\n  } else if (number == 0)  {\n    print (\"zero\")\n  } else {\n    print(\"negative number\")\n  }\n}\n\nis_positive(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"positive number\"\n```\n:::\n\n```{.r .cell-code}\nis_positive(-3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"negative number\"\n```\n:::\n:::\n\n## For-loops\n\nLoops repeat the same statement, although the statement can be \"the same\" only in an abstract sense.  Use the `for(x in X)` syntax to repeat the subsequent command as many times as there are elements in the right-hand object `X`. Each of these elements will be referred to the left-hand index `x`\n\nFirst, come up with a vector. \n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-43_dc62b2186a4e21d47ba758bbee96ac72'}\n\n```{.r .cell-code}\nfruits <- c(\"apples\", \"oranges\", \"grapes\")\n```\n:::\n\n\nNow we use the `fruits` vector in a `for` loop.\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-44_75ec98e308159a2a5a57418c236010e8'}\n\n```{.r .cell-code}\nfor (fruit in fruits) {\n  print(paste(\"I love\", fruit))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I love apples\"\n[1] \"I love oranges\"\n[1] \"I love grapes\"\n```\n:::\n:::\n\n\nHere `for()` and `in` must be part of any for loop. The right hand side `fruits` must be a thing that exists. Finally the `left-hand` side object is \"Pick your favor name.\" It is analogous to how we can index a sum with any letter. $\\sum_{i=1}^{10}i$ and `sum_{j = 1}^{10}j` are in fact the same thing.\n\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-45_e7b24242967654ff2da33269a8d4151f'}\n\n```{.r .cell-code}\nfor (i in 1:length(fruits)) {\n  print(paste(\"I love\", fruits[i]))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I love apples\"\n[1] \"I love oranges\"\n[1] \"I love grapes\"\n```\n:::\n:::\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-46_5e8bfbdeeead9163c736d20328f5508f'}\n\n```{.r .cell-code}\nstates_of_interest <- c(\"California\", \"Massachusetts\", \"New Hampshire\", \"Washington\")\n\nfor( state in states_of_interest){\n  state_data <- cen10[cen10$state == state,]\n  nmen <- sum(state_data$sex == \"Male\")\n\n  n <- nrow(state_data)\n  men_perc <- round(100*(nmen/n), digits=2)\n  print(paste(\"Percentage of men in\",state, \"is\", men_perc))\n\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Percentage of men in California is 49.85\"\n[1] \"Percentage of men in Massachusetts is 47.6\"\n[1] \"Percentage of men in New Hampshire is 48.55\"\n[1] \"Percentage of men in Washington is 48.19\"\n```\n:::\n:::\n\n\nInstead of printing, you can store the information in a vector\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-47_6045d5de7d72fabe77e7cf4a750e5aee'}\n\n```{.r .cell-code}\nstates_of_interest <- c(\"California\", \"Massachusetts\", \"New Hampshire\", \"Washington\")\nmale_percentages <- c()\niter <-1 \n\nfor( state in states_of_interest){\n  state_data <- cen10[cen10$state == state,]\n  nmen <- sum(state_data$sex == \"Male\")\n  n <- nrow(state_data)\n  men_perc <- round(100*(nmen/n), digits=2)\n  \n  male_percentages <- c(male_percentages, men_perc)\n  names(male_percentages)[iter] <- state\n  iter <- iter + 1\n}\n\nmale_percentages\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   California Massachusetts New Hampshire    Washington \n        49.85         47.60         48.55         48.19 \n```\n:::\n:::\n\n\n## Nested Loops\n\nWhat if I want to calculate the population percentage of a race group for all race groups in states of interest?\nYou could probably use tidyverse functions to do this, but let's try using loops!\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-48_dbdd7f439fb6720d05dea6d71fb4face'}\n\n```{.r .cell-code}\nstates_of_interest <- c(\"California\", \"Massachusetts\", \"New Hampshire\", \"Washington\")\nfor (state in states_of_interest) {\n  for (race in unique(cen10$race)) {\n    race_state_num <- nrow(cen10[cen10$race == race & cen10$state == state, ])\n    state_pop <- nrow(cen10[cen10$state == state, ])\n    race_perc <- round(100*(race_state_num/(state_pop)), digits=2)\n    print(paste(\"Percentage of \", race , \"in\", state, \"is\", race_perc))\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Percentage of  White in California is 57.61\"\n[1] \"Percentage of  Black/Negro in California is 6.72\"\n[1] \"Percentage of  Other race, nec in California is 15.55\"\n[1] \"Percentage of  American Indian or Alaska Native in California is 1.12\"\n[1] \"Percentage of  Chinese in California is 3.75\"\n[1] \"Percentage of  Other Asian or Pacific Islander in California is 9.54\"\n[1] \"Percentage of  Two major races in California is 4.62\"\n[1] \"Percentage of  Three or more major races in California is 0.37\"\n[1] \"Percentage of  Japanese in California is 0.72\"\n[1] \"Percentage of  White in Massachusetts is 79.6\"\n[1] \"Percentage of  Black/Negro in Massachusetts is 5.87\"\n[1] \"Percentage of  Other race, nec in Massachusetts is 4.02\"\n[1] \"Percentage of  American Indian or Alaska Native in Massachusetts is 0.77\"\n[1] \"Percentage of  Chinese in Massachusetts is 2.32\"\n[1] \"Percentage of  Other Asian or Pacific Islander in Massachusetts is 4.33\"\n[1] \"Percentage of  Two major races in Massachusetts is 2.78\"\n[1] \"Percentage of  Three or more major races in Massachusetts is 0\"\n[1] \"Percentage of  Japanese in Massachusetts is 0.31\"\n[1] \"Percentage of  White in New Hampshire is 93.48\"\n[1] \"Percentage of  Black/Negro in New Hampshire is 0.72\"\n[1] \"Percentage of  Other race, nec in New Hampshire is 0.72\"\n[1] \"Percentage of  American Indian or Alaska Native in New Hampshire is 0.72\"\n[1] \"Percentage of  Chinese in New Hampshire is 0.72\"\n[1] \"Percentage of  Other Asian or Pacific Islander in New Hampshire is 2.17\"\n[1] \"Percentage of  Two major races in New Hampshire is 0.72\"\n[1] \"Percentage of  Three or more major races in New Hampshire is 0\"\n[1] \"Percentage of  Japanese in New Hampshire is 0.72\"\n[1] \"Percentage of  White in Washington is 76.05\"\n[1] \"Percentage of  Black/Negro in Washington is 2.9\"\n[1] \"Percentage of  Other race, nec in Washington is 5.37\"\n[1] \"Percentage of  American Indian or Alaska Native in Washington is 2.03\"\n[1] \"Percentage of  Chinese in Washington is 1.31\"\n[1] \"Percentage of  Other Asian or Pacific Islander in Washington is 6.68\"\n[1] \"Percentage of  Two major races in Washington is 4.79\"\n[1] \"Percentage of  Three or more major races in Washington is 0.29\"\n[1] \"Percentage of  Japanese in Washington is 0.58\"\n```\n:::\n:::\n\n## Exercises {-}\n\n\n### Exercise 1: Write your own function {-}\nWrite your own function that makes some task of data analysis simpler. Ideally, it would be a function that helps you do either of the previous tasks in fewer lines of code. You can use the three lines of code that was provided in exercise 1 to wrap that into another function too!\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-49_ff31f8dd37d687d1c7ef71973aef34d3'}\n\n```{.r .cell-code}\n# Enter yourself\n```\n:::\n\n\n\n\n### Exercise 2: Using Loops {-}\n\n\nUsing a loop, create a crosstab of sex and race for each state in the set \"states_of_interest\"\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-50_5b7b51e6fef230fb390738ee66563765'}\n\n```{.r .cell-code}\nstates_of_interest <- c(\"California\", \"Massachusetts\", \"New Hampshire\", \"Washington\")\n# Enter yourself\n```\n:::\n\n\n\n\n### Exercise 3: Storing information derived within loops in a global dataframe {-}\n\nRecall the following nested loop\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-51_e70a6479e32fbc22ebce17a3544a4fcc'}\n\n```{.r .cell-code}\nstates_of_interest <- c(\"California\", \"Massachusetts\", \"New Hampshire\", \"Washington\")\nfor (state in states_of_interest) {\n  for (race in unique(cen10$race)) {\n    race_state_num <- nrow(cen10[cen10$race == race & cen10$state == state, ])\n    state_pop <- nrow(cen10[cen10$state == state, ])\n    race_perc <- round(100*(race_state_num/(state_pop)), digits=2)\n    print(paste(\"Percentage of \", race , \"in\", state, \"is\", race_perc))\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Percentage of  White in California is 57.61\"\n[1] \"Percentage of  Black/Negro in California is 6.72\"\n[1] \"Percentage of  Other race, nec in California is 15.55\"\n[1] \"Percentage of  American Indian or Alaska Native in California is 1.12\"\n[1] \"Percentage of  Chinese in California is 3.75\"\n[1] \"Percentage of  Other Asian or Pacific Islander in California is 9.54\"\n[1] \"Percentage of  Two major races in California is 4.62\"\n[1] \"Percentage of  Three or more major races in California is 0.37\"\n[1] \"Percentage of  Japanese in California is 0.72\"\n[1] \"Percentage of  White in Massachusetts is 79.6\"\n[1] \"Percentage of  Black/Negro in Massachusetts is 5.87\"\n[1] \"Percentage of  Other race, nec in Massachusetts is 4.02\"\n[1] \"Percentage of  American Indian or Alaska Native in Massachusetts is 0.77\"\n[1] \"Percentage of  Chinese in Massachusetts is 2.32\"\n[1] \"Percentage of  Other Asian or Pacific Islander in Massachusetts is 4.33\"\n[1] \"Percentage of  Two major races in Massachusetts is 2.78\"\n[1] \"Percentage of  Three or more major races in Massachusetts is 0\"\n[1] \"Percentage of  Japanese in Massachusetts is 0.31\"\n[1] \"Percentage of  White in New Hampshire is 93.48\"\n[1] \"Percentage of  Black/Negro in New Hampshire is 0.72\"\n[1] \"Percentage of  Other race, nec in New Hampshire is 0.72\"\n[1] \"Percentage of  American Indian or Alaska Native in New Hampshire is 0.72\"\n[1] \"Percentage of  Chinese in New Hampshire is 0.72\"\n[1] \"Percentage of  Other Asian or Pacific Islander in New Hampshire is 2.17\"\n[1] \"Percentage of  Two major races in New Hampshire is 0.72\"\n[1] \"Percentage of  Three or more major races in New Hampshire is 0\"\n[1] \"Percentage of  Japanese in New Hampshire is 0.72\"\n[1] \"Percentage of  White in Washington is 76.05\"\n[1] \"Percentage of  Black/Negro in Washington is 2.9\"\n[1] \"Percentage of  Other race, nec in Washington is 5.37\"\n[1] \"Percentage of  American Indian or Alaska Native in Washington is 2.03\"\n[1] \"Percentage of  Chinese in Washington is 1.31\"\n[1] \"Percentage of  Other Asian or Pacific Islander in Washington is 6.68\"\n[1] \"Percentage of  Two major races in Washington is 4.79\"\n[1] \"Percentage of  Three or more major races in Washington is 0.29\"\n[1] \"Percentage of  Japanese in Washington is 0.58\"\n```\n:::\n:::\n\n\nInstead of printing the percentage of each race in each state, create a dataframe, and store all that information in that dataframe. (Hint: look at how I stored information about male percentage in each state of interest in a vector.)\n\n\n\n::: {.cell hash='12_functions_obj_loops_cache/pdf/unnamed-chunk-52_21efa184501e8f0e0eab9668eb2dd8f7'}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}