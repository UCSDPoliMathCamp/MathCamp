{
  "hash": "717d23ab0e8f608d5cfc10ab34180450",
  "result": {
    "markdown": "#  LaTeX and Markdown {#nonwysiwyg}\n\n\n### Where are we? Where are we headed? {-}\n\nUp till now, you should have covered:\n\n* Statistical Programming in `R`\n\nThis is only the beginning of `R` -- programming is like learning a language, so learn more as we use it. And yet `R` is of likely not the only programming language you will want to use. While we cannot introduce everything, we'll pick out a few that we think are particularly helpful.\n\nHere will cover\n\n* Markdown\n* LaTeX (and BibTeX)\n\nas examples of a non-WYSIWYG editor\n\ncommand-line are a basic set of tools that you may have to use from time to time. It also clarifies what more complicated programs are doing. Markdown is an example of compiling a plain text file. LaTeX is a typesetting program and git is a version control program -- both are useful for non-quantitative work as well.\n\nPlease familiarize yourself closing with Markdown, and be sure you know how to open an .Rmd file as described below. In class, we will walk through an Rmd file together. LaTeX is included here for your future reference as this is a popular typesetting program among political scientists. This is not needed for Math Camp and is never required for any course. In fact, many prefer R Markdown's integration rather than a separate typesetting program. This depends on your background and interests but exposure to the range of popular programs and techniques will be helpful moving forward.\n\n\n### Check your understanding {-}\n\nCheck if you have an idea of how you might code the following tasks:\n\n* What does \"WYSIWYG\" stand for? How would a non-WYSIWYG format text?\n* How do you start a header in markdown?\n* What are some \"plain text\" editors?\n* How do you start a document in `.tex`?\n* How do you start a environment in `.tex`?\n* How do you insert a figure in `.tex`?\n* How do you reference a figure in `.tex`?\n* What is a `.bib` file? \n* Say you came across a interesting journal article. How would you want to maintain this reference so that you can refer to its citation in all your subsequent papers?\n\n\n\n\n## Motivation\n\nStatistical programming is a fast-moving field. The beta version of `R` was released in 2000, `ggplot2` was released on 2005, and  `RStudio` started around 2010. Of course, some programming technologies are quite \"old\": (`C` in 1969, `C++` around 1989, `TeX` in 1978, `Linux` in 1991, Mac OS in 1984). But it is easy to feel you are falling behind in the recent developments of programming. Today we will do a **brief** and rough overview of some fundamental and new tools other than `R`, with the general aim of having you break out of your comfort zone so you won't be shut out from learning these tools in the future.\n\n\n## Markdown\n\nAt its core markdown is just plain text. Plain text does not have any formatting embedded in it. Instead, the formatting is coded up as text. Markdown is _not_ a WYSIWYG (What you see is what you get) text editor like Microsoft Word or Google Docs. This will mean that you need to explicitly code for `bold{text}` rather than hitting Command+B and making your text look __bold__ on your own computer. \n\nMarkdown is known as a \"light-weight\" editor, which means that it is relatively easy to write code that will compile. It is quick and easy and satisfies most presentation purposes; you might want to try `LaTeX` for more involved papers.\n\n### markdown commands\nFor italic and bold, use either the asterisks or the underlines, \n\n```\n*italic*   **bold**\n_italic_   __bold__\n```\n\nAnd for headers use the hash symbols, \n```\n# Main Header\n## Sub-headers\n```\n\n### your own markdown \n\nRStudio makes it easy to compile your very first markdown file by giving you templates. Got to `New > R Markdown`, pick a document and click Ok. This will give you a skeleton of a document you can compile -- or \"knit\".\n\nRmd is actually a slight modification of real markdown. It is a type of file that R reads and turns into a proper `md` file. Then, it uses a document-conversion called pandoc to compile your `md` into documents like PDF or HTML.\n\n![How Rmds become PDFs or HTMLs](images/RMarkdownFlow.png)\n\n\n\n### A note on plain-text editors\n\nMultiple software exist where you can edit plain-text (roughly speaking, text that is not WYSIWYG). \n\n* RStudio (especially for R-related links)\n* TeXMaker, TeXShop (especially for TeX)\n* [emacs](https://www.gnu.org/software/emacs/), aquamacs (general)\n* [vim](http://www.vim.org/download.php) (general)\n* [Sublime Text](https://www.sublimetext.com) (general)\n* [Atom](https://atom.io/) (general)\n\nEach has their own keyboard shortcuts and special features. You can browse a couple and see which one(s) you like.\n \n\n## LaTeX\n\nLaTeX is a typesetting program. You'd engage with LaTeX much like you engage with your `R` code. You will interact with LaTeX in a text editor, and will writing code which will be interpreted by the LaTeX compiler and which will finally be parsed to form your final PDF.\n\n### compile online\n\n1. Go to <https://www.overleaf.com>\n2. Scroll down and go to \"CREATE A NEW PAPER\" if you don't have an account.\n3. Let's discuss the default template.\n4. Make a new document, and set it as your main document. Then type in the Minimal Working Example (MWE):\n\n\n::: {.cell hash='15_non-wysiwyg_cache/epub/unnamed-chunk-1_40d18ced3c202bf9407ef99297b41aac'}\n\n```{.bash .cell-code}\n\\documentclass{article}\n\\begin{document}\nHello World\n\\end{document}\n```\n:::\n\n\n\n\n### compile your first LaTeX document locally\nLaTeX is a very stable system, and few changes to it have been made since the 1990s. The main benefit: better control over how your papers will look; better methods for writing equations or making tables; overall pleasing aesthetic. \n\n1. Open a plain text editor. Then type in the MWE\n\n\n::: {.cell hash='15_non-wysiwyg_cache/epub/unnamed-chunk-2_38ad82516ca7bd6fd9438cd4c22138da'}\n\n```{.bash .cell-code}\n\\documentclass{article}\n\\begin{document}\nHello World\n\\end{document}\n```\n:::\n\n\n2. Save this as `hello_world.tex`. Make sure you get the file extension right. \n3. Open this in your \"LaTeX\" editor. This can be `TeXMaker`, `Aqumacs`, etc..\n4. Go through the click/dropdown interface and click compile.\n\n\n### main LaTeX commands\nLaTeX can cover most of your typesetting needs, to clean equations and intricate diagrams. \n\nSome main commands you'll be using are below, and a very concise cheat sheet here: <https://wch.github.io/latexsheet/latexsheet.pdf>\n\nMost involved features require that you begin a specific \"environment\" for that feature, clearly demarcating them by the notation `\\begin{figure}` and then `\\end{figure}`, e.g. in the case of figures.\n\n```\n\\begin{figure}\n\\includegraphics{histogram.pdf}\n\\end{figure}\n```\nwhere `histogram.pdf` is a path to one of your files. \n\nNotice that each line starts with a backslash `\\` -- in LaTeX this is the symbol to run a command.\n\nThe following syntax at the endpoints are shorthand for math equations.\n```\n\\[\\int x^2 dx\\]\n```\nthese compile math symbols: $\\displaystyle \\int x^2 dx.$^[Enclosing with `$$` instead of `\\[` also has the same effect, so you may see it too. But this is now discouraged due to its inflexibility.]\n\n\nThe `align` environment is useful to align your multi-line math, for example. \n```\n\\begin{align}\nP(A \\mid B) &= \\frac{P(A \\cap B)}{P(B)}\\\\\n&= \\frac{P(B \\mid A)P(A)}{P(B)}\n\\end{align}\n```\n\\begin{align}\nP(A \\mid B) &= \\frac{P(A \\cap B)}{P(B)}\\\\\n&= \\frac{P(B \\mid A)P(A)}{P(B)}\n\\end{align}\n\nRegression tables should be outputted as `.tex` files with packages like `xtable` and `stargazer`, and then called into LaTeX by `\\input{regression_table.tex}` where `regression_table.tex` is the path to your regression output.\n\nFigures and equations should be labelled with the tag (e.g. `label{tab:regression}` so that you can refer to them later with their tag `Table \\ref{tab:regression}`, instead of hard-coding `Table 2`).\n\nFor some LaTeX commands you might need to load a separate package that someone else has written. Do this in your preamble (i.e. before `\\begin{document}`):\n```\n\\usepackage[options]{package}\n```\nwhere `package` is the name of the package and `options` are options specific to the package. \n\n\n### Further Guides {-}\n\nFor a more comprehensive listing of LaTeX commands, Mayya Komisarchik has a great tutorial set of folders: <https://scholar.harvard.edu/mkomisarchik/tutorials-0>\n\nThere is a version of LaTeX called Beamer, which is a popular way of making a slideshow. Slides in markdown is also a competitor. The language of Beamer is the same as LaTeX but has some special functions for slides.\n\n\n## BibTeX\n\nBibTeX is a reference system for bibliographical tests. We have a `.bib` file separately on our computer. This is also a plain text file, but it encodes bibliographical resources with special syntax so that a program can rearrange parts accordingly for different citation systems. \n\n### what is a `.bib` file?\nFor example, here is the Nunn and Wantchekon article entry in `.bib` form.\n\n```{}\n@article{nunn2011slave,\n  title={The Slave Trade and the Origins of Mistrust in Africa},\n  author={Nunn, Nathan and Wantchekon, Leonard},\n  journal={American Economic Review},\n  volume={101},\n  number={7},\n  pages={3221--3252},\n  year={2011}\n}\n```\n\nThe first entry, `nunn2011slave`, is \"pick your favorite\" -- pick your own name for your reference system. The other slots in this `@article` entry are entries that refer to specific bibliographical text.\n\n### what does LaTeX do with .bib files?\nNow, in LaTeX, if you type  \n\n      \\textcite{nunn2011slave} argue that current variation in the trust among citizens of African countries has historical roots in the European slave trade in the 1600s.\n      \nas part of your text, then when the `.tex` file is compiled the PDF shows something like \n\n![](images/biblatex_inline.png)\n\nin whatever citation style (APSA, APA, Chicago) you pre-specified! \n\n\nAlso at the end of your paper you will have a bibliography with entries ordered and formatted in the appropriate citation.\n\n![](images/biblatex_bibliography.png)\n\nThis is a much less frustrating way of keeping track of your references -- no need to hand-edit formatting the bibliography to conform to citation rules (which biblatex already knows) and no need to update your bibliography as you add and drop references (biblatex will only show entries that are used in the main text).\n\n\n### stocking up on your .bib files\nYou should keep your own `.bib` file that has all your bibliographical resources. Storing entries is cheap (does not take much memory), so it is fine to keep all your references in one place (but you'll want to make a new one for collaborative projects where multiple people will compile a `.tex` file).\n\nFor example, Gary's BibTeX file is here: <https://github.com/iqss-research/gkbibtex/blob/master/gk.bib>\n\nCitation management software (Mendeley or Zotero) automatically generates .bib entries from your library of PDFs for you, provided you have the bibliography attributes right. \n\n## Extension: Optional Exercise {-}\n\nCreate a LaTeX document for a hypothetical research paper on your laptop and, once you've verified it compiles into a PDF, come show it to either one of the instructors. \n\nYou can also use overleaf if you have preference for a cloud-based system. But don't swallow the built-in templates without understanding or testing them.\n\nEach student will have slightly different substantive interests, so we won't impose much of a standard. But at a minimum, the LaTeX document should have:\n\n* A title, author, date, and abstract\n* Sections\n* Italics and boldface\n* A figure with a caption and in-text reference to it. \n\n\nDepending on your subfield or interests, try to implement some of the following:\n\n* A bibliographical reference drawing from a separate `.bib` file\n* A table\n* A math expression\n* A different font\n* Different page margins\n* Different line spacing",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": {},
    "postProcess": true
  }
}