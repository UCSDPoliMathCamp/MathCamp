{
  "hash": "50c482d96ef640a0570db936d8e2c3cc",
  "result": {
    "markdown": "#  Manipulating Vectors and  Matrices {#rmatrices}\n\n\n\n\n\n### Motivation {-}\n\n[Nunn and Wantchekon (2011)](https://dash.harvard.edu/bitstream/handle/1/11986331/nunn-slave-trade.pdf) --  \"The Slave Trade and the Origins of Mistrust in Africa\"^[[Nunn, Nathan, and Leonard Wantchekon. 2011. “The Slave Trade and the Origins of Mistrust in Africa.” American Economic Review 101(7): 3221–52.](https://dash.harvard.edu/bitstream/handle/1/11986331/nunn-slave-trade.pdf)] --  argues that across African countries, the distrust of co-ethnics fueled by the slave trade has had long-lasting effects on modern day trust in these territories. They argued that the slave trade created distrust in these societies in part because as some African groups were employed by European traders to capture their neighbors and bring them to the slave ships.\n\nNunn and Wantchekon use a variety of statistical tools to make their case (adding controls, ordered logit, instrumental variables, falsification tests, causal mechanisms), many of which will be covered in future courses. In this module we will only touch on their first set of analysis that use Ordinary Least Squares (OLS). OLS is likely the most common application of linear algebra in the social sciences. We will cover some linear algebra, matrix manipulation, and vector manipulation from this data. \n\n\n### Where are we? Where are we headed? {-}\n\nUp till now, you should have covered:\n\n* R basic programming\n* Data Import\n* Data Visualization\n* R Markdown\n\n\nToday we'll cover\n\n* Matrices & Dataframes in R\n* Manipulating variables \n* And other `R` tips\n\n\n\n\n## Read Data\n\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-2_8afab397b786ae57873059c5726b24e4'}\n\n```{.r .cell-code}\nlibrary(haven)\nnunn_full <- read_dta(\"data/input/Nunn_Wantchekon_AER_2011.dta\")\n```\n:::\n\n\n\nNunn and Wantchekon's main dataset has more than 20,000 observations. Each observation is a respondent from the Afrobarometer survey.\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-3_cbbd6016b40826b5e9a40eff3cc57a96'}\n\n```{.r .cell-code}\nhead(nunn_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 59\n  respno  ethni…¹ murdo…² isocode region distr…³ townv…⁴ locat…⁵ trust…⁶ trust…⁷\n  <chr>   <chr>   <chr>   <chr>   <chr>  <chr>   <chr>     <dbl>   <dbl>   <dbl>\n1 BEN0001 fon     FON     BEN     atlna… KPOMAS… TOKPA-…      30       3       3\n2 BEN0002 fon     FON     BEN     atlna… KPOMAS… TOKPA-…      30       3       3\n3 BEN0003 fon     FON     BEN     atlna… OUIDAH  3ARROND      31       0       0\n4 BEN0004 fon     FON     BEN     atlna… OUIDAH  3ARROND      31       0       0\n5 BEN0005 fon     FON     BEN     atlna… OUIDAH  PAHOU        32       1       1\n6 BEN0006 fon     FON     BEN     atlna… OUIDAH  PAHOU        32       1       1\n# … with 49 more variables: intra_group_trust <dbl>, inter_group_trust <dbl>,\n#   trust_local_council <dbl>, ln_export_area <dbl>, export_area <dbl>,\n#   export_pop <dbl>, ln_export_pop <dbl>, age <dbl>, age2 <dbl>, male <dbl>,\n#   urban_dum <dbl>, occupation <dbl>, religion <dbl>, living_conditions <dbl>,\n#   education <dbl>, near_dist <dbl>, distsea <dbl>, loc_murdock_name <chr>,\n#   loc_ln_export_area <dbl>, local_council_performance <dbl>,\n#   council_listen <dbl>, corrupt_local_council <dbl>, school_present <dbl>, …\n# ℹ Use `colnames()` to see all variable names\n```\n:::\n\n```{.r .cell-code}\ncolnames(nunn_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"respno\"                          \"ethnicity\"                      \n [3] \"murdock_name\"                    \"isocode\"                        \n [5] \"region\"                          \"district\"                       \n [7] \"townvill\"                        \"location_id\"                    \n [9] \"trust_relatives\"                 \"trust_neighbors\"                \n[11] \"intra_group_trust\"               \"inter_group_trust\"              \n[13] \"trust_local_council\"             \"ln_export_area\"                 \n[15] \"export_area\"                     \"export_pop\"                     \n[17] \"ln_export_pop\"                   \"age\"                            \n[19] \"age2\"                            \"male\"                           \n[21] \"urban_dum\"                       \"occupation\"                     \n[23] \"religion\"                        \"living_conditions\"              \n[25] \"education\"                       \"near_dist\"                      \n[27] \"distsea\"                         \"loc_murdock_name\"               \n[29] \"loc_ln_export_area\"              \"local_council_performance\"      \n[31] \"council_listen\"                  \"corrupt_local_council\"          \n[33] \"school_present\"                  \"electricity_present\"            \n[35] \"piped_water_present\"             \"sewage_present\"                 \n[37] \"health_clinic_present\"           \"district_ethnic_frac\"           \n[39] \"frac_ethnicity_in_district\"      \"townvill_nonethnic_mean_exports\"\n[41] \"district_nonethnic_mean_exports\" \"region_nonethnic_mean_exports\"  \n[43] \"country_nonethnic_mean_exports\"  \"murdock_centr_dist_coast\"       \n[45] \"centroid_lat\"                    \"centroid_long\"                  \n[47] \"explorer_contact\"                \"railway_contact\"                \n[49] \"dist_Saharan_node\"               \"dist_Saharan_line\"              \n[51] \"malaria_ecology\"                 \"v30\"                            \n[53] \"v33\"                             \"fishing\"                        \n[55] \"exports\"                         \"ln_exports\"                     \n[57] \"total_missions_area\"             \"ln_init_pop_density\"            \n[59] \"cities_1400_dum\"                \n```\n:::\n:::\n\n\n\n\nFirst, let's consider a small subset of this dataset. \n\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-5_afa5053104314c3761a9003ac03ab057'}\n\n```{.r .cell-code}\nnunn <- read_dta(\"data/input/Nunn_Wantchekon_sample.dta\")\n```\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-6_89ad04675b0276b1dc83ab68e196264c'}\n\n```{.r .cell-code}\nnunn\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   trust_neighbors exports ln_exports export_area ln_export_area\n             <dbl>   <dbl>      <dbl>       <dbl>          <dbl>\n 1               3   0.388      0.328     0.00407        0.00406\n 2               3   0.631      0.489     0.0971         0.0926 \n 3               3   0.994      0.690     0.0125         0.0124 \n 4               0 183.         5.21      1.82           1.04   \n 5               3   0          0         0              0      \n 6               2   0          0         0              0      \n 7               2 666.         6.50     14.0            2.71   \n 8               0   0.348      0.298     0.00608        0.00606\n 9               3   0.435      0.361     0.0383         0.0376 \n10               3   0          0         0              0      \n```\n:::\n:::\n\n\n\n\n## data.frame vs. matricies\nThis is a `data.frame` object. \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-7_ac0ed2ee69e51c5f33e68510aacf64cd'}\n\n```{.r .cell-code}\nclass(nunn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n\nBut it can be also consider a matrix in the linear algebra sense. What are the dimensions of this matrix?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-8_6337a3cf6a325b651027fd75edbd3e1f'}\n\n```{.r .cell-code}\nnrow(nunn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n`data.frame`s and matrices have much overlap in `R`, but to explicitly treat an object as a matrix, you'd need to coerce its class. Let's call this matrix `X`.\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-9_e5aa9ca385fe5786d75a6beb21f696c7'}\n\n```{.r .cell-code}\nX <- as.matrix(nunn)\n```\n:::\n\n\n\nWhat is the difference between a `data.frame` and a matrix? A `data.frame` can have columns that are of different types, whereas --- in a matrix --- all columns must be of the same type (usually either \"numeric\" or \"character\").\n\n\nYou can think of data frames maybe as matrices-plus, because a column can take on characters as well as numbers. As we just saw, this is often useful for real data analyses.\n\n\nAnother way to think about data frames is that it is a type of list. Try the `str()` code below and notice how it is organized in slots. Each slot is a vector. They can be vectors of numbers or characters.\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-10_62492edc453142ba3abc355559d23a2a'}\n\n```{.r .cell-code}\n# enter this on your console\nstr(cen10)\n```\n:::\n\n\n\n\n\n## Handling matricies in `R`\n\nYou can easily transpose a matrix\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-11_a683327bdc28ce82848850865166499d'}\n\n```{.r .cell-code}\nX\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trust_neighbors     exports ln_exports  export_area ln_export_area\n [1,]               3   0.3883497  0.3281158  0.004067405    0.004059155\n [2,]               3   0.6311236  0.4892691  0.097059444    0.092633367\n [3,]               3   0.9941893  0.6902376  0.012524694    0.012446908\n [4,]               0 182.5891266  5.2127004  1.824284434    1.038255095\n [5,]               3   0.0000000  0.0000000  0.000000000    0.000000000\n [6,]               2   0.0000000  0.0000000  0.000000000    0.000000000\n [7,]               2 665.9652100  6.5027380 13.975566864    2.706419945\n [8,]               0   0.3476418  0.2983562  0.006082553    0.006064130\n [9,]               3   0.4349871  0.3611559  0.038332380    0.037615947\n[10,]               3   0.0000000  0.0000000  0.000000000    0.000000000\n```\n:::\n\n```{.r .cell-code}\nt(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       [,1]       [,2]       [,3]       [,4] [,5] [,6]\ntrust_neighbors 3.000000000 3.00000000 3.00000000   0.000000    3    2\nexports         0.388349682 0.63112360 0.99418926 182.589127    0    0\nln_exports      0.328115761 0.48926911 0.69023758   5.212700    0    0\nexport_area     0.004067405 0.09705944 0.01252469   1.824284    0    0\nln_export_area  0.004059155 0.09263337 0.01244691   1.038255    0    0\n                      [,7]        [,8]       [,9] [,10]\ntrust_neighbors   2.000000 0.000000000 3.00000000     3\nexports         665.965210 0.347641766 0.43498713     0\nln_exports        6.502738 0.298356235 0.36115587     0\nexport_area      13.975567 0.006082553 0.03833238     0\nln_export_area    2.706420 0.006064130 0.03761595     0\n```\n:::\n:::\n\n\n\nWhat are the values of all rows in the first column? \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-12_a1eb315b293dd5f62f97c32bd4e01704'}\n\n```{.r .cell-code}\nX[, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3 3 3 0 3 2 2 0 3 3\n```\n:::\n:::\n\n\nWhat are all the values of \"exports\"? (i.e. return the whole \"exports\" column)\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-13_3095553ace71f7e6fb9ccb58af4faba7'}\n\n```{.r .cell-code}\nX[, \"exports\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0.3883497   0.6311236   0.9941893 182.5891266   0.0000000   0.0000000\n [7] 665.9652100   0.3476418   0.4349871   0.0000000\n```\n:::\n:::\n\n\nWhat is the first observation (i.e. first row)?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-14_0966eb273d7405877e02a5a9b6295184'}\n\n```{.r .cell-code}\nX[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrust_neighbors         exports      ln_exports     export_area  ln_export_area \n    3.000000000     0.388349682     0.328115761     0.004067405     0.004059155 \n```\n:::\n:::\n\n\nWhat is the value of the first variable of the first observation?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-15_6c5fa680eeeb463c618bd4c71af3208b'}\n\n```{.r .cell-code}\nX[1, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrust_neighbors \n              3 \n```\n:::\n:::\n\n\nPause and consider the following problem on your own. What is the following code doing? \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-16_d16262fb402f5494a46a9a7f5024131f'}\n\n```{.r .cell-code}\nX[X[, \"trust_neighbors\"] == 0, \"export_area\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.824284434 0.006082553\n```\n:::\n:::\n\nWhy does it give the same output as the following? \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-17_d7b5aa97fb7a5329acd58daa1f1f952f'}\n\n```{.r .cell-code}\nX[which(X[, \"trust_neighbors\"] == 0), \"export_area\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.824284434 0.006082553\n```\n:::\n:::\n\n\n\n\nSome more manipulation \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-18_ed3e98efb938264804e78074db003b51'}\n\n```{.r .cell-code}\nX + X\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trust_neighbors      exports ln_exports  export_area ln_export_area\n [1,]               6    0.7766994  0.6562315  0.008134809     0.00811831\n [2,]               6    1.2622472  0.9785382  0.194118887     0.18526673\n [3,]               6    1.9883785  1.3804752  0.025049388     0.02489382\n [4,]               0  365.1782532 10.4254007  3.648568869     2.07651019\n [5,]               6    0.0000000  0.0000000  0.000000000     0.00000000\n [6,]               4    0.0000000  0.0000000  0.000000000     0.00000000\n [7,]               4 1331.9304199 13.0054760 27.951133728     5.41283989\n [8,]               0    0.6952835  0.5967125  0.012165107     0.01212826\n [9,]               6    0.8699743  0.7223117  0.076664761     0.07523189\n[10,]               6    0.0000000  0.0000000  0.000000000     0.00000000\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-19_aee03b4de80216915118009bc43a545d'}\n\n```{.r .cell-code}\nX - X\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trust_neighbors exports ln_exports export_area ln_export_area\n [1,]               0       0          0           0              0\n [2,]               0       0          0           0              0\n [3,]               0       0          0           0              0\n [4,]               0       0          0           0              0\n [5,]               0       0          0           0              0\n [6,]               0       0          0           0              0\n [7,]               0       0          0           0              0\n [8,]               0       0          0           0              0\n [9,]               0       0          0           0              0\n[10,]               0       0          0           0              0\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-20_e4df2983504bb97226152d6b8e43a152'}\n\n```{.r .cell-code}\nt(X) %*% X\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                trust_neighbors    exports ln_exports export_area\ntrust_neighbors       62.000000   1339.276   18.61181    28.40709\nexports             1339.276369 476850.298 5283.76294  9640.42990\nln_exports            18.611811   5283.763   70.50077   100.46202\nexport_area           28.407085   9640.430  100.46202   198.65558\nln_export_area         5.853106   1992.047   23.08189    39.72847\n                ln_export_area\ntrust_neighbors       5.853106\nexports            1992.046502\nln_exports           23.081893\nexport_area          39.728468\nln_export_area        8.412887\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-21_14e58e389ff9d3a514b77e72d59360bd'}\n\n```{.r .cell-code}\ncbind(X, 1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trust_neighbors     exports ln_exports  export_area ln_export_area   \n [1,]               3   0.3883497  0.3281158  0.004067405    0.004059155  1\n [2,]               3   0.6311236  0.4892691  0.097059444    0.092633367  2\n [3,]               3   0.9941893  0.6902376  0.012524694    0.012446908  3\n [4,]               0 182.5891266  5.2127004  1.824284434    1.038255095  4\n [5,]               3   0.0000000  0.0000000  0.000000000    0.000000000  5\n [6,]               2   0.0000000  0.0000000  0.000000000    0.000000000  6\n [7,]               2 665.9652100  6.5027380 13.975566864    2.706419945  7\n [8,]               0   0.3476418  0.2983562  0.006082553    0.006064130  8\n [9,]               3   0.4349871  0.3611559  0.038332380    0.037615947  9\n[10,]               3   0.0000000  0.0000000  0.000000000    0.000000000 10\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-22_2569a2db01698d02a878177cd7d1bd25'}\n\n```{.r .cell-code}\ncbind(X, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      trust_neighbors     exports ln_exports  export_area ln_export_area  \n [1,]               3   0.3883497  0.3281158  0.004067405    0.004059155 1\n [2,]               3   0.6311236  0.4892691  0.097059444    0.092633367 1\n [3,]               3   0.9941893  0.6902376  0.012524694    0.012446908 1\n [4,]               0 182.5891266  5.2127004  1.824284434    1.038255095 1\n [5,]               3   0.0000000  0.0000000  0.000000000    0.000000000 1\n [6,]               2   0.0000000  0.0000000  0.000000000    0.000000000 1\n [7,]               2 665.9652100  6.5027380 13.975566864    2.706419945 1\n [8,]               0   0.3476418  0.2983562  0.006082553    0.006064130 1\n [9,]               3   0.4349871  0.3611559  0.038332380    0.037615947 1\n[10,]               3   0.0000000  0.0000000  0.000000000    0.000000000 1\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-23_a8f703554c0f66cd0a582d4278b11871'}\n\n```{.r .cell-code}\ncolnames(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"trust_neighbors\" \"exports\"         \"ln_exports\"      \"export_area\"    \n[5] \"ln_export_area\" \n```\n:::\n:::\n\n\n\n## Variable Transformations\n\n`exports` is the total number of slaves that were taken from the individual's ethnic group between Africa's four slave trades between 1400-1900. \n\nWhat is `ln_exports`? The article describes this as the natural log of one plus the `exports`. This is a transformation of one column by a particular function\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-24_793e8f9c79a0e9e0b3f4507808370f59'}\n\n```{.r .cell-code}\nlog(1 + X[, \"exports\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.3281158 0.4892691 0.6902376 5.2127003 0.0000000 0.0000000 6.5027379\n [8] 0.2983562 0.3611559 0.0000000\n```\n:::\n:::\n\nQuestion for you: why add the 1? \n\nVerify that this is the same as `X[, \"ln_exports\"]`\n\n\n## Linear Combinations\n\nIn Table 1 we see \"OLS Estimates\". These are estimates of OLS coefficients and standard errors. You do not need to know what these are for now, but it doesn't hurt to getting used to seeing them. \n\n![](images/nunn_wantchekon_table1.png)\n\nA very crude way to describe regression is through linear combinations. The simplest linear combination is a one-to-one transformation.\n\nTake the first number in Table 1, which is -0.00068. Now, multiply this by `exports`\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-25_0cd764157b6e5f2d22d96de68914f4ea'}\n\n```{.r .cell-code}\n-0.00068 * X[, \"exports\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -0.0002640778 -0.0004291640 -0.0006760487 -0.1241606061  0.0000000000\n [6]  0.0000000000 -0.4528563428 -0.0002363964 -0.0002957912  0.0000000000\n```\n:::\n:::\n\n\n\nNow, just one more step. Make a new matrix with just exports and the value 1\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-26_41980b977231dd496d16854d5398a9cd'}\n\n```{.r .cell-code}\nX2 <- cbind(1, X[, \"exports\"])\n```\n:::\n\n\nname this new column \"intercept\"\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-27_745c4340d02433c9aa7427bbba011bc9'}\n\n```{.r .cell-code}\ncolnames(X2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-28_cebc72d1483992d8626cc1c4e6f80123'}\n\n```{.r .cell-code}\ncolnames(X2) <- c(\"intercept\", \"exports\")\n```\n:::\n\n\n\nWhat are the dimensions of the matrix `X2`?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-29_7fde1211b37ab91328492193f7e1e2e4'}\n\n```{.r .cell-code}\ndim(X2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10  2\n```\n:::\n:::\n\n\n\nNow consider a new matrix, called `B`.\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-30_3cd4ee5aadb7c3acf9e8546398113836'}\n\n```{.r .cell-code}\nB <- matrix(c(1.62, -0.00068))\n```\n:::\n\n\nWhat are the dimensions of `B`?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-31_ec9366f1fc1099f6e350ea3043f902cb'}\n\n```{.r .cell-code}\ndim(B)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 1\n```\n:::\n:::\n\n\n\nWhat is the product of `X2` and `B`? From the dimensions, can you tell if it will be conformable?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-32_413cec8b9e42ac6aadd317f94fc33bc9'}\n\n```{.r .cell-code}\nX2 %*% B\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          [,1]\n [1,] 1.619736\n [2,] 1.619571\n [3,] 1.619324\n [4,] 1.495839\n [5,] 1.620000\n [6,] 1.620000\n [7,] 1.167144\n [8,] 1.619764\n [9,] 1.619704\n[10,] 1.620000\n```\n:::\n:::\n\n\nWhat is this multiplication doing in terms of equations?\n\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-33_41793c96c6c5b18c374638afd9c44e86'}\n\n:::\n\n\n\n## Matrix Basics\n\n\nLet's take a look at Matrices in the context of R\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-34_e04368053384d418b409be42349f23de'}\n\n```{.r .cell-code}\ncen10 <- read_csv(\"data/input/usc2010_001percent.csv\")\nhead(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  state         sex      age race       \n  <chr>         <chr>  <dbl> <chr>      \n1 New York      Female     8 White      \n2 Ohio          Male      24 White      \n3 Nevada        Male      37 White      \n4 Michigan      Female    12 White      \n5 Maryland      Female    18 Black/Negro\n6 New Hampshire Male      50 White      \n```\n:::\n:::\n\n\nWhat is the dimension of this dataframe? What does the number of rows represent? What does the number of columns represent?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-35_60e01dce01b1dac8afc7346d184a924d'}\n\n```{.r .cell-code}\ndim(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30871     4\n```\n:::\n\n```{.r .cell-code}\nnrow(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30871\n```\n:::\n\n```{.r .cell-code}\nncol(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\nWhat variables does this dataset hold? What kind of information does it have?\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-36_56c8258b9dfcd23211d5da567ebc2433'}\n\n```{.r .cell-code}\ncolnames(cen10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"state\" \"sex\"   \"age\"   \"race\" \n```\n:::\n:::\n\n\nWe can access column vectors, or vectors that contain values of variables by using the $ sign\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-37_a3f3e63ac4878317d315318dfe98fa5f'}\n\n```{.r .cell-code}\nhead(cen10$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New York\"      \"Ohio\"          \"Nevada\"        \"Michigan\"     \n[5] \"Maryland\"      \"New Hampshire\"\n```\n:::\n\n```{.r .cell-code}\nhead(cen10$race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"White\"       \"White\"       \"White\"       \"White\"       \"Black/Negro\"\n[6] \"White\"      \n```\n:::\n:::\n\n\nWe can look at a unique set of variable values by calling the unique function\n\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-38_7bcd63ec2ae618b0a28446d2e595f984'}\n\n```{.r .cell-code}\nunique(cen10$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"New York\"             \"Ohio\"                 \"Nevada\"              \n [4] \"Michigan\"             \"Maryland\"             \"New Hampshire\"       \n [7] \"Iowa\"                 \"Missouri\"             \"New Jersey\"          \n[10] \"California\"           \"Texas\"                \"Pennsylvania\"        \n[13] \"Washington\"           \"West Virginia\"        \"Idaho\"               \n[16] \"North Carolina\"       \"Massachusetts\"        \"Connecticut\"         \n[19] \"Arkansas\"             \"Indiana\"              \"Wisconsin\"           \n[22] \"Maine\"                \"Tennessee\"            \"Minnesota\"           \n[25] \"Florida\"              \"Oklahoma\"             \"Montana\"             \n[28] \"Georgia\"              \"Arizona\"              \"Colorado\"            \n[31] \"Virginia\"             \"Illinois\"             \"Oregon\"              \n[34] \"Kentucky\"             \"South Carolina\"       \"Kansas\"              \n[37] \"Louisiana\"            \"Alabama\"              \"District of Columbia\"\n[40] \"Mississippi\"          \"Utah\"                 \"Delaware\"            \n[43] \"Nebraska\"             \"Alaska\"               \"New Mexico\"          \n[46] \"South Dakota\"         \"Hawaii\"               \"Vermont\"             \n[49] \"Rhode Island\"         \"Wyoming\"              \"North Dakota\"        \n```\n:::\n:::\n\n\nHow many different states are represented (this dataset includes DC as a state)? \n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-39_957c0fc8849fb153c0d326d6e9b7cecf'}\n\n```{.r .cell-code}\nlength(unique(cen10$state))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 51\n```\n:::\n:::\n\n\nMatrices are rectangular structures of numbers (they have to be numbers, and they can't be characters).\n\nA cross-tab can be considered a matrix:\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-40_e1c265aa1cfe739341d4da56460aa86c'}\n\n```{.r .cell-code}\ntable(cen10$race, cen10$sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                  \n                                   Female  Male\n  American Indian or Alaska Native    142   153\n  Black/Negro                        2070  1943\n  Chinese                             192   162\n  Japanese                             51    26\n  Other Asian or Pacific Islander     587   542\n  Other race, nec                     877   962\n  Three or more major races            37    51\n  Two major races                     443   426\n  White                             11252 10955\n```\n:::\n:::\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-41_d25dbce2f8cab08df15a8eed81c9a3ad'}\n\n```{.r .cell-code}\ncross_tab <- table(cen10$race, cen10$sex)\ndim(cross_tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9 2\n```\n:::\n\n```{.r .cell-code}\ncross_tab[6, 2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 962\n```\n:::\n:::\n\n\n\nBut a subset of your data -- individual values-- can be considered a matrix too. \n\n\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-42_34b87927aebce3b6a30274d4cb55d584'}\n\n```{.r .cell-code}\n# First 20 rows of the entire data\n# Below two lines of code do the same thing\ncen10[1:20, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n   state         sex      age race           \n   <chr>         <chr>  <dbl> <chr>          \n 1 New York      Female     8 White          \n 2 Ohio          Male      24 White          \n 3 Nevada        Male      37 White          \n 4 Michigan      Female    12 White          \n 5 Maryland      Female    18 Black/Negro    \n 6 New Hampshire Male      50 White          \n 7 Iowa          Female    51 White          \n 8 Missouri      Female    41 White          \n 9 New Jersey    Male      62 White          \n10 California    Male      25 White          \n11 Texas         Female    23 White          \n12 Pennsylvania  Female    66 White          \n13 California    Female    57 White          \n14 Texas         Female    73 Other race, nec\n15 California    Male      43 White          \n16 Washington    Male      29 White          \n17 Texas         Male       8 White          \n18 Missouri      Male      78 White          \n19 West Virginia Male      10 White          \n20 Idaho         Female     9 White          \n```\n:::\n\n```{.r .cell-code}\ncen10 %>% slice(1:20)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 4\n   state         sex      age race           \n   <chr>         <chr>  <dbl> <chr>          \n 1 New York      Female     8 White          \n 2 Ohio          Male      24 White          \n 3 Nevada        Male      37 White          \n 4 Michigan      Female    12 White          \n 5 Maryland      Female    18 Black/Negro    \n 6 New Hampshire Male      50 White          \n 7 Iowa          Female    51 White          \n 8 Missouri      Female    41 White          \n 9 New Jersey    Male      62 White          \n10 California    Male      25 White          \n11 Texas         Female    23 White          \n12 Pennsylvania  Female    66 White          \n13 California    Female    57 White          \n14 Texas         Female    73 Other race, nec\n15 California    Male      43 White          \n16 Washington    Male      29 White          \n17 Texas         Male       8 White          \n18 Missouri      Male      78 White          \n19 West Virginia Male      10 White          \n20 Idaho         Female     9 White          \n```\n:::\n\n```{.r .cell-code}\n# Of the first 20 rows of the entire data, look at values of just race and age\n# Below two lines of code do the same thing\ncen10[1:20, c(\"race\", \"age\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   race              age\n   <chr>           <dbl>\n 1 White               8\n 2 White              24\n 3 White              37\n 4 White              12\n 5 Black/Negro        18\n 6 White              50\n 7 White              51\n 8 White              41\n 9 White              62\n10 White              25\n11 White              23\n12 White              66\n13 White              57\n14 Other race, nec    73\n15 White              43\n16 White              29\n17 White               8\n18 White              78\n19 White              10\n20 White               9\n```\n:::\n\n```{.r .cell-code}\ncen10 %>% slice(1:20) %>% select(race, age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   race              age\n   <chr>           <dbl>\n 1 White               8\n 2 White              24\n 3 White              37\n 4 White              12\n 5 Black/Negro        18\n 6 White              50\n 7 White              51\n 8 White              41\n 9 White              62\n10 White              25\n11 White              23\n12 White              66\n13 White              57\n14 Other race, nec    73\n15 White              43\n16 White              29\n17 White               8\n18 White              78\n19 White              10\n20 White               9\n```\n:::\n:::\n\n\nA vector is a special type of matrix with only one column or only one row \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-43_5fce8aaee726d095ca2a3b617ea2574e'}\n\n```{.r .cell-code}\n# One column\ncen10[1:10, c(\"age\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n     age\n   <dbl>\n 1     8\n 2    24\n 3    37\n 4    12\n 5    18\n 6    50\n 7    51\n 8    41\n 9    62\n10    25\n```\n:::\n\n```{.r .cell-code}\ncen10 %>% slice(1:10) %>% select(c(\"age\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n     age\n   <dbl>\n 1     8\n 2    24\n 3    37\n 4    12\n 5    18\n 6    50\n 7    51\n 8    41\n 9    62\n10    25\n```\n:::\n\n```{.r .cell-code}\n# One row\ncen10[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  state sex     age race \n  <chr> <chr> <dbl> <chr>\n1 Ohio  Male     24 White\n```\n:::\n\n```{.r .cell-code}\ncen10 %>% slice(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  state sex     age race \n  <chr> <chr> <dbl> <chr>\n1 Ohio  Male     24 White\n```\n:::\n:::\n\n\nWhat if we want a special subset of the data? For example, what if I only want the records of individuals in California? What if I just want the age and race of individuals in California?\n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-44_2b45c43597b2de148b3ee1a63720d437'}\n\n```{.r .cell-code}\n# subset for CA rows\nca_subset <- cen10[cen10$state == \"California\", ]\n\nca_subset_tidy <- cen10 %>% filter(state == \"California\")\n\nall_equal(ca_subset, ca_subset_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# subset for CA rows and select age and race\nca_subset_age_race <- cen10[cen10$state == \"California\", c(\"age\", \"race\")]\n\nca_subset_age_race_tidy <- cen10 %>% filter(state == \"California\") %>% select(age, race)\n\nall_equal(ca_subset_age_race, ca_subset_age_race_tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nSome common operators that can be used to filter or to use as a condition. Remember, you can use the unique function to look at the set of all values a variable holds in the dataset. \n\n::: {.cell hash='22_matrices_cache/epub/unnamed-chunk-45_a6a4ff6a9ed2aa0fdffd581e00d5d6b3'}\n\n```{.r .cell-code}\n# all individuals older than 30 and younger than 70\ns1 <- cen10[cen10$age > 30 & cen10$age < 70, ]\ns2 <- cen10 %>% filter(age > 30 & age < 70)\nall_equal(s1, s2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# all individuals in either New York or California\ns3 <- cen10[cen10$state == \"New York\" | cen10$state == \"California\", ]\ns4 <- cen10 %>% filter(state == \"New York\" | state == \"California\")\nall_equal(s3, s4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# all individuals in any of the following states: California, Ohio, Nevada, Michigan\ns5 <- cen10[cen10$state %in% c(\"California\", \"Ohio\", \"Nevada\", \"Michigan\"), ]\ns6 <- cen10 %>% filter(state %in% c(\"California\", \"Ohio\", \"Nevada\", \"Michigan\"))\nall_equal(s5, s6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# all individuals NOT in any of the following states: California, Ohio, Nevada, Michigan\ns7 <- cen10[!(cen10$state %in% c(\"California\", \"Ohio\", \"Nevada\", \"Michigan\")), ]\ns8 <- cen10 %>% filter(!state %in% c(\"California\", \"Ohio\", \"Nevada\", \"Michigan\"))\nall_equal(s7, s8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": {},
    "postProcess": true
  }
}